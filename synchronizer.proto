// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package sync438;

import "google/protobuf/timestamp.proto";

// The messenger service definition.
service SynchronizerService{

    rpc sendFollowerInfo (FollowerRequest) returns (Reply) {}
    rpc sendAllClientsInfo (FollowerRequest) returns (Reply) {}
    rpc sendTimelineInfo (TimelineRequest) returns (Reply) {}
    rpc coordinatorCommunicate (Request) returns (Reply) {}

}

enum ServerType{
    MASTER = 0;
    SLAVE = 1;
    SYNCHRONIZER = 3;
    COORDINATOR = 4;
}

enum RequesterType{
    CLIENT = 0;
    SERVER = 1;
}

message Request{
    // message with their port number
    string port_number = 1;
    // the id of the request
    int32 id = 2;
    // the type of server
    ServerType server_type = 3;
    int32 server_size = 4;
}

message Reply{
    string msg = 1;
    string port_number = 2;
}

message FollowerRequest{
    string client = 1;
    string client_in_file = 2;
    repeated int32 user_id = 3;
    int32 server_id = 4;

}

message TimelineRequest{
    string client_id = 1;
    string msgToSend = 2;
    string server_id = 3;
}

message HeartBeat{
    // id of the server
    int32 server_size = 1;
    // type of the server
    ServerType s_type = 2;
    //Time the message was sent
    google.protobuf.Timestamp timestamp = 3;
    string msg = 4;
}
